File: performance.test
Type: cpu
Time: Aug 3, 2025 at 3:29pm (+07)
Duration: 35.10s, Total samples = 57.88s (164.90%)
Showing nodes accounting for 52.79s, 91.21% of 57.88s total
Dropped 343 nodes (cum <= 0.29s)
      flat  flat%   sum%        cum   cum%
    12.30s 21.25% 21.25%     12.30s 21.25%  runtime.usleep
     6.52s 11.26% 32.52%      6.52s 11.26%  runtime.pthread_cond_wait
     5.32s  9.19% 41.71%      5.32s  9.19%  runtime.kevent
     4.94s  8.53% 50.24%      4.94s  8.53%  runtime.pthread_cond_signal
     4.34s  7.50% 57.74%      4.62s  7.98%  golang.org/x/crypto/blowfish.encryptBlock
     3.69s  6.38% 64.12%      3.70s  6.39%  syscall.syscall
     1.95s  3.37% 67.48%      1.95s  3.37%  runtime.pthread_kill
     1.89s  3.27% 70.75%      1.89s  3.27%  runtime.madvise
     1.55s  2.68% 73.43%      1.55s  2.68%  runtime.procyield
     1.39s  2.40% 75.83%      1.39s  2.40%  runtime.pthread_mutex_lock
     1.38s  2.38% 78.21%      1.59s  2.75%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkSliceOperations.func2
     1.22s  2.11% 80.32%      1.33s  2.30%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkSliceOperations.func3
     1.14s  1.97% 82.29%      1.14s  1.97%  runtime.memmove
     0.61s  1.05% 83.34%      0.61s  1.05%  runtime.asyncPreempt
     0.56s  0.97% 84.31%      0.56s  0.97%  runtime.pthread_cond_timedwait_relative_np
     0.45s  0.78% 85.09%      2.39s  4.13%  runtime.mallocgc
     0.45s  0.78% 85.87%      0.48s  0.83%  runtime.scanblock
     0.42s  0.73% 86.59%      0.42s  0.73%  runtime.memclrNoHeapPointers
     0.39s  0.67% 87.27%      0.39s  0.67%  runtime.pthread_mutex_unlock
     0.35s   0.6% 87.87%      0.99s  1.71%  runtime.scanobject
     0.31s  0.54% 88.41%     13.80s 23.84%  runtime.lock2
     0.21s  0.36% 88.77%      0.53s  0.92%  fmt.(*pp).doPrintf
     0.19s  0.33% 89.10%      3.04s  5.25%  runtime.unlock2
     0.14s  0.24% 89.34%      4.77s  8.24%  golang.org/x/crypto/blowfish.ExpandKey
     0.06s   0.1% 89.44%      0.67s  1.16%  encoding/json.(*decodeState).object
     0.06s   0.1% 89.55%      0.31s  0.54%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkSliceOperations.func1
     0.05s 0.086% 89.63%      0.52s   0.9%  encoding/json.mapEncoder.encode
     0.05s 0.086% 89.72%      1.20s  2.07%  fmt.Sprintf
     0.05s 0.086% 89.81%      0.53s  0.92%  runtime.(*mcache).refill
     0.05s 0.086% 89.89%      0.37s  0.64%  runtime.(*sweepLocked).sweep
     0.05s 0.086% 89.98%      5.57s  9.62%  runtime.chanrecv
     0.04s 0.069% 90.05%      0.88s  1.52%  encoding/json.structEncoder.encode
     0.04s 0.069% 90.12%      0.62s  1.07%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkStringOperations.func2
     0.04s 0.069% 90.19%      0.42s  0.73%  runtime.deductAssistCredit
     0.04s 0.069% 90.26%      0.34s  0.59%  runtime.gcFlushBgCredit
     0.04s 0.069% 90.32%      8.48s 14.65%  runtime.selectgo
     0.03s 0.052% 90.38%      1.68s  2.90%  runtime.(*mheap).allocSpan
     0.03s 0.052% 90.43%      0.58s  1.00%  runtime.gcAssistAlloc1
     0.03s 0.052% 90.48%      0.80s  1.38%  runtime.markroot
     0.03s 0.052% 90.53%      7.05s 12.18%  runtime.sellock
     0.03s 0.052% 90.58%      0.32s  0.55%  runtime.slicebytetostring
     0.03s 0.052% 90.64%      0.79s  1.36%  runtime.stealWork
     0.02s 0.035% 90.67%      8.50s 14.69%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkConcurrentAccess.func1.1
     0.02s 0.035% 90.70%      1.83s  3.16%  runtime.(*gcWork).balance
     0.02s 0.035% 90.74%      0.55s  0.95%  runtime.(*mcache).nextFree
     0.02s 0.035% 90.77%      0.42s  0.73%  runtime.(*mcentral).cacheSpan
     0.02s 0.035% 90.81%      7.39s 12.77%  runtime.findRunnable
     0.02s 0.035% 90.84%      0.39s  0.67%  runtime.growslice
     0.02s 0.035% 90.88%      7.09s 12.25%  runtime.park_m
     0.02s 0.035% 90.91%      0.72s  1.24%  runtime.typedmemmove
     0.01s 0.017% 90.93%      0.89s  1.54%  encoding/json.(*encodeState).reflectValue
     0.01s 0.017% 90.95%      0.98s  1.69%  encoding/json.Marshal
     0.01s 0.017% 90.96%      1.38s  2.38%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkGoroutineCreation.func2
     0.01s 0.017% 90.98%      1.09s  1.88%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkMemoryAllocation.func1
     0.01s 0.017% 91.00%      0.30s  0.52%  runtime.(*mcentral).grow
     0.01s 0.017% 91.02%      0.32s  0.55%  runtime.(*mheap).alloc
     0.01s 0.017% 91.03%      1.65s  2.85%  runtime.(*mheap).alloc.func1
     0.01s 0.017% 91.05%      0.66s  1.14%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3
     0.01s 0.017% 91.07%      1.93s  3.33%  runtime.gcBgMarkWorker
     0.01s 0.017% 91.09%      3.62s  6.25%  runtime.gcDrain
     0.01s 0.017% 91.10%      0.46s  0.79%  runtime.gcDrainN
     0.01s 0.017% 91.12%      0.47s  0.81%  runtime.markrootBlock
     0.01s 0.017% 91.14%      1.52s  2.63%  runtime.morestack
     0.01s 0.017% 91.15%      3.87s  6.69%  runtime.notewakeup
     0.01s 0.017% 91.17%      1.34s  2.32%  runtime.selunlock
     0.01s 0.017% 91.19%      0.46s  0.79%  runtime.sweepone
     0.01s 0.017% 91.21%      3.51s  6.06%  runtime.wakep
         0     0% 91.21%      3.70s  6.39%  crypto/rand.(*reader).Read
         0     0% 91.21%      3.69s  6.38%  crypto/rand.Read
         0     0% 91.21%      3.70s  6.39%  crypto/rand.init.0.batched.func1
         0     0% 91.21%      0.67s  1.16%  encoding/json.(*decodeState).unmarshal
         0     0% 91.21%      0.67s  1.16%  encoding/json.(*decodeState).value
         0     0% 91.21%      0.89s  1.54%  encoding/json.(*encodeState).marshal
         0     0% 91.21%      0.87s  1.50%  encoding/json.Unmarshal
         0     0% 91.21%      3.69s  6.38%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkCryptoOperations.func1
         0     0% 91.21%      6.77s 11.70%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkGoroutineCreation.func2.1
         0     0% 91.21%         1s  1.73%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkJSONMarshaling
         0     0% 91.21%      0.87s  1.50%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkJSONUnmarshaling
         0     0% 91.21%      0.65s  1.12%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkMapOperations.func3
         0     0% 91.21%      3.69s  6.38%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkPasswordHashing.func1
         0     0% 91.21%      1.14s  1.97%  github.com/elotusteam/microservice-project/tests/performance.BenchmarkPasswordVerification
         0     0% 91.21%      0.99s  1.71%  golang.org/x/crypto/bcrypt.CompareHashAndPassword
         0     0% 91.21%      3.84s  6.63%  golang.org/x/crypto/bcrypt.GenerateFromPassword
         0     0% 91.21%      4.82s  8.33%  golang.org/x/crypto/bcrypt.bcrypt
         0     0% 91.21%      4.77s  8.24%  golang.org/x/crypto/bcrypt.expensiveBlowfishSetup
         0     0% 91.21%      3.84s  6.63%  golang.org/x/crypto/bcrypt.newFromPassword
         0     0% 91.21%      3.70s  6.39%  internal/syscall/unix.GetEntropy
         0     0% 91.21%      3.70s  6.39%  io.ReadAtLeast
         0     0% 91.21%      3.70s  6.39%  io.ReadFull (inline)
         0     0% 91.21%      1.51s  2.61%  runtime.(*gcControllerState).enlistWorker
         0     0% 91.21%      0.52s   0.9%  runtime.(*pageAlloc).scavenge.func1
         0     0% 91.21%      0.52s   0.9%  runtime.(*pageAlloc).scavengeOne
         0     0% 91.21%      0.43s  0.74%  runtime.bgsweep
         0     0% 91.21%      5.39s  9.31%  runtime.chanrecv2
         0     0% 91.21%      2.54s  4.39%  runtime.chansend
         0     0% 91.21%      2.54s  4.39%  runtime.chansend1
         0     0% 91.21%      0.87s  1.50%  runtime.forEachPInternal
         0     0% 91.21%      0.38s  0.66%  runtime.gcAssistAlloc
         0     0% 91.21%      0.58s  1.00%  runtime.gcAssistAlloc.func1
         0     0% 91.21%      3.74s  6.46%  runtime.gcBgMarkWorker.func2
         0     0% 91.21%      2.52s  4.35%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 91.21%      1.10s  1.90%  runtime.gcDrainMarkWorkerIdle (inline)
         0     0% 91.21%      0.64s  1.11%  runtime.gcMarkDone.forEachP.func5
         0     0% 91.21%      0.29s   0.5%  runtime.gcMarkTermination.func3
         0     0% 91.21%      5.22s  9.02%  runtime.gcStart.func3
         0     0% 91.21%      0.86s  1.49%  runtime.goexit0
         0     0% 91.21%      1.44s  2.49%  runtime.gopreempt_m (inline)
         0     0% 91.21%      1.45s  2.51%  runtime.goschedImpl
         0     0% 91.21%      0.29s   0.5%  runtime.handoff
         0     0% 91.21%     13.80s 23.84%  runtime.lock (partial-inline)
         0     0% 91.21%     13.80s 23.84%  runtime.lockWithRank (inline)
         0     0% 91.21%      6.10s 10.54%  runtime.mPark (inline)
         0     0% 91.21%      1.43s  2.47%  runtime.makeslice
         0     0% 91.21%      7.99s 13.80%  runtime.mcall
         0     0% 91.21%      5.32s  9.19%  runtime.netpoll
         0     0% 91.21%      0.75s  1.30%  runtime.newproc.func1
         0     0% 91.21%      1.53s  2.64%  runtime.newstack
         0     0% 91.21%      6.10s 10.54%  runtime.notesleep
         0     0% 91.21%      0.56s  0.97%  runtime.notetsleep
         0     0% 91.21%      0.56s  0.97%  runtime.notetsleep_internal
         0     0% 91.21%     11.59s 20.02%  runtime.osyield (inline)
         0     0% 91.21%      1.95s  3.37%  runtime.preemptM
         0     0% 91.21%      0.37s  0.64%  runtime.preemptall
         0     0% 91.21%      1.88s  3.25%  runtime.preemptone
         0     0% 91.21%      1.03s  1.78%  runtime.ready
         0     0% 91.21%      0.94s  1.62%  runtime.resetspinning
         0     0% 91.21%      0.71s  1.23%  runtime.runqgrab
         0     0% 91.21%      0.71s  1.23%  runtime.runqsteal
         0     0% 91.21%      8.37s 14.46%  runtime.schedule
         0     0% 91.21%      7.12s 12.30%  runtime.semasleep
         0     0% 91.21%      6.68s 11.54%  runtime.semawakeup
         0     0% 91.21%      0.73s  1.26%  runtime.send.goready.func1
         0     0% 91.21%      1.95s  3.37%  runtime.signalM (inline)
         0     0% 91.21%      5.52s  9.54%  runtime.startTheWorldWithSema
         0     0% 91.21%      3.52s  6.08%  runtime.startm
         0     0% 91.21%      6.13s 10.59%  runtime.stopm
         0     0% 91.21%      0.51s  0.88%  runtime.sysUnused (inline)
         0     0% 91.21%      0.51s  0.88%  runtime.sysUnusedOS (inline)
         0     0% 91.21%      1.38s  2.38%  runtime.sysUsed (inline)
         0     0% 91.21%      1.38s  2.38%  runtime.sysUsedOS (inline)
         0     0% 91.21%     15.30s 26.43%  runtime.systemstack
         0     0% 91.21%      3.04s  5.25%  runtime.unlock (partial-inline)
         0     0% 91.21%      3.04s  5.25%  runtime.unlockWithRank (inline)
         0     0% 91.21%      8.50s 14.69%  testing.(*B).RunParallel.func1
         0     0% 91.21%     17.77s 30.70%  testing.(*B).launch
         0     0% 91.21%      0.62s  1.07%  testing.(*B).run1.func1
         0     0% 91.21%     18.39s 31.77%  testing.(*B).runN

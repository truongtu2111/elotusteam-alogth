version: '3.8'

services:
  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - JWT_SECRET=your-jwt-secret-key
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - microservice-network

  # File Service
  file-service:
    build:
      context: .
      dockerfile: services/file/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=file_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - microservice-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - microservice-network

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8085
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=analytics_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - microservice-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=microservice_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - microservice-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - file-service
      - user-service
      - analytics-service
    networks:
      - microservice-network

volumes:
  postgres_data:
  redis_data:

networks:
  microservice-network:
    driver: bridge